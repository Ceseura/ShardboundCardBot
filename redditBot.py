import praw 	# Python Reddit API Wrapper
import re  		# Regex
import json 	# Read.json files
import datetime # Date, time
import sys 		# Command line arguments
from testCredentials import USER_AGENT, CLIENT_ID, CLIENT_SECRET, USERNAME, PASSWORD, USER_AGENT2, CLIENT_ID2, CLIENT_SECRET2 	# Auth data for Reddit API

# TODO: Disclaimer/info at bottom
# TODO: Aux cards "Vengeful Knight"

starttime = datetime.datetime.now().timestamp()

# This python script is a reddit bot which responds to submissions 
# with text formatted like '[[CARD NAME]]' with information about 
# the card, from www.shardveil.com/cards/. 

# Get the data from the .json file
with open("ShardBound_cards.json") as data_file:
	data = json.load(data_file)

# Dictionary for display purposes
colors = {"Neutral": "", "Steelsinger": "(Red)", "Fatekeeper": "(Blue)", "Landshaper": "(Green)", "Packrunner": "(Yellow)", "Wayfinder": "(Orange)", "Bloodbinder": "(Purple)"}


# {0} Card Name
# {1} Image Link
# {2} Faction
# {3} Type (Range/Melee)
# {4} Mana Cost
# {5} Attack Value
# {6} Health Value
# {7} Tribe
# {8} Rarity
# {9} Card Text
# {10} Color
MINION_REPLY_TEMPLATE = '[{0}]({1}) {2} {10} {8} {3}\n\n{4} Mana {5}/{6} {7} - {9}\n\n\n'
ARTIFACT_REPLY_TEMPLATE = '[{0}]({1}) {2} {10} {8} {3}\n\n{4} Mana 0/{6} {7} - {9}\n\n\n'
SPELL_REPLY_TEMPLATE = '[{0}]({1}) {2} {7} {5} {3}\n\n{4} Mana - {6}\n\n\n'
HERO_REPLY_TEMPLATE = '[{0}]({1}) {2} {7} {3}\n\n{4}/{5} - {6}\n\n\n'
SIMPLE_TEMPLATE = "Card: {0}\n\n\n"

REPLY_FOOTER = '\n\n^(This comment was generated by an automated bot. Please direct any questions or feedback to /u/Seura.)'

def main():
	print("I'm working")
	# Pick which mode we operate in
	subMode = True
	MY_USER_AGENT = USER_AGENT
	MY_CLIENT_ID = CLIENT_ID
	MY_CLIENT_SECRET = CLIENT_SECRET

	if len(sys.argv) > 1 and sys.argv[1] == 'comments':
		print("comments mode")
		subMode = False
		MY_USER_AGENT = USER_AGENT2
		MY_CLIENT_ID = CLIENT_ID2
		MY_CLIENT_SECRET = CLIENT_SECRET2

	# Initialize the Reddit Client
	print("initializing reddit client")
	reddit = praw.Reddit(user_agent=MY_USER_AGENT, client_id=MY_CLIENT_ID, client_secret=MY_CLIENT_SECRET, username=USERNAME, password=PASSWORD)

	# Which subreddit?
	subreddit = reddit.subreddit('Shardbound')

	if subMode:
		for item in subreddit.stream.submissions():
			process_item(item, True)
	else:
		print("Comment stream")
		for item in subreddit.stream.comments():
			process_item(item, False)

# subMode is: {True: submissionMode, False: commentMode}
def process_item(item, subMode):
	# Don't do anything if the comment was posted before the bot was started
	if starttime > item.created_utc:
		print("skipped:", starttime, ">", item.created_utc)
		return

	# Normalize text to lowercase
	if subMode:
		text = item.selftext.lower()
	else:
		text = item.body.lower()
	
	print(text)

	# Search for [[CARD NAME]] patterns
	pattern = re.compile('\[\[[a-z0-9\' !-]+\]\]')
	cardList = re.findall(pattern, text)
	print(cardList)

	reply_text = ''
	for card in cardList:
		card = card[2:-2]
		# Make sure the card is valid
		if card in data:
			reply_text += generate_reply(data[card])
		else:
			print("Couldn't find", card)

	# Reply
	if subMode:
		reply_target = item.title
	else:
		reply_target = item.author

	if reply_text is not '':
		print("replying to", reply_target)
		item.reply(reply_text)

def generate_reply(card):
	if "Artifact" in card["type"]:
		reply = MINION_REPLY_TEMPLATE.format(card["name"], card["link"], card["faction"], card["type"], card["mana"], 0, card["health"], card["tribe"], card["rarity"], card["text"], colors[card["faction"]])

	elif "Minion" in card["type"]:
		reply = MINION_REPLY_TEMPLATE.format(card["name"], card["link"], card["faction"], card["type"], card["mana"], card["attack"], card["health"], card["tribe"], card["rarity"], card["text"], colors[card["faction"]])

	elif "Spell" in card["type"]:
		reply = SPELL_REPLY_TEMPLATE.format(card["name"], card["link"], card["faction"], card["type"], card["mana"], card["rarity"], card["text"], colors[card["faction"]])

	elif "Hero" in card["type"]:
		reply = HERO_REPLY_TEMPLATE.format(card["name"], card["link"], card["faction"], card["type"], card["attack"], card["health"], card["text"], colors[card["faction"]])

	else:
		reply = SIMPLE_TEMPLATE.format(card["name"])

	return reply + REPLY_FOOTER

if __name__ == '__main__':
	main()